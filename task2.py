import json
import time
from datasketch import HyperLogLog

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è IP –∑ –ª–æ–≥-—Ñ–∞–π–ª—É
def load_ips_from_log(file_path):
    ip_list = []
    with open(file_path, 'r', encoding='utf-8') as file:
        for line_num, line in enumerate(file, 1):
            try:
                log_entry = json.loads(line)
                ip = log_entry.get('remote_addr')
                if ip:
                    ip_list.append(ip)
            except json.JSONDecodeError:
                continue  
    return ip_list

# –¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
def exact_count(ip_list):
    start_time = time.time()
    unique_ips = set(ip_list)
    count = len(unique_ips)
    elapsed_time = time.time() - start_time
    return count, elapsed_time

# HyperLogLog –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
def hyperloglog_count(ip_list, p=14):
    start_time = time.time()
    hll = HyperLogLog(p)
    for ip in ip_list:
        hll.update(ip.encode('utf-8'))
    count = int(hll.count())
    elapsed_time = time.time() - start_time
    return count, elapsed_time

def print_results(exact_unique, exact_time, hll_unique, hll_time):
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:\n")
    print(f"{'':<35}{'–¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫':<20}{'HyperLogLog':<20}")
    print(f"{'–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏':<35}{exact_unique:<20.1f}{hll_unique:<20.1f}")
    print(f"{'–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫.)':<35}{exact_time:<20.4f}{hll_time:<20.4f}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def run_comparison(file_path):
    print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è IP –∞–¥—Ä–µ—Å –∑ –ª–æ–≥—É...")
    ip_list = load_ips_from_log(file_path)
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(ip_list)} IP –∞–¥—Ä–µ—Å.")

    exact_unique, exact_time = exact_count(ip_list)
    hll_unique, hll_time = hyperloglog_count(ip_list)

    print_results(exact_unique, exact_time, hll_unique, hll_time)

if __name__ == "__main__":
    log_file_path = "lms-stage-access.log" 
    run_comparison(log_file_path)
